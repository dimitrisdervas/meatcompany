{
  "test/test.js": {
    "id": "test/test.js",
    "type": "js",
    "mtime": 1412876741000,
    "src": "\ndescribe('Cache', function(){\n  var assert = require('component/assert');\n  var cache = require('../index');\n\n  throw new Error('error!');\n\n  describe('()', function(){\n    it('should return new cache', function(){\n      assert(cache() != cache());\n    })\n\n    it('should default .max to infinity', function(){\n      assert(Infinity == cache()._max);\n    })\n\n    it('should default .ttl to 0', function(){\n      assert(0 == cache()._ttl);\n    })\n  })\n\n  describe('({ max: 20 })', function(){\n    it('should respect options', function(){\n      assert(20 == cache({ max: 20 })._max)\n    })\n  })\n\n  describe('({ ttl: 2ms })', function(){\n    it('should respect options', function(){\n      assert(2 == cache({ ttl: '2ms' })._ttl);\n    })\n  })\n\n  describe('#set', function(){\n    it('should push to keys', function(){\n      var c = cache();\n      c.set('a', 'b');\n      c.set('b', 'c');\n      assert(2 == c.keys.length);\n      assert('b' == c.keys[1]);\n    })\n\n    it('should add to `.vals`', function(){\n      var c = cache();\n      c.set('a', 'a');\n      c.set('c', 'c');\n      assert('c' == c.vals.c.value);\n      assert('a' == c.vals.a.value);\n    })\n\n    it('should remove if the key exists', function(){\n      var c = cache();\n      c.set('a', 'a');\n      c.set('a', 'b');\n      c.set('c', 'b');\n      assert('b' == c.vals.a.value);\n      assert(2 == c.keys.length);\n      assert('a' == c.keys[0]);\n      assert('c' == c.keys[1]);\n    })\n\n    it('should cap', function(){\n      var c = cache({ max: 2 });\n      c.set('a', 'a');\n      c.set('b', 'b');\n      c.set('c', 'c');\n      assert(2 == c.keys.length);\n      assert('b' == c.keys[0]);\n      assert('c' == c.keys[1]);\n    })\n\n    it('should add .created to value', function(){\n      assert(cache().set('a', 'b').vals.a.created);\n    })\n\n    it('should add .ttl to value', function(){\n      assert(0 == cache().set('a', 'b').vals.a.ttl);\n    })\n\n    it('should default .ttl to global .ttl', function(){\n      var c = cache({ ttl: '1m' });\n      c.set('a', 'b');\n      var a = c.vals.a;\n      assert(6e+4 == a.ttl);\n    })\n\n    it('should respect .ttl if given', function(){\n      var c = cache({ ttl: '1m' });\n      c.set('a', 'b', '2m');\n      var a = c.vals.a;\n      assert(12e+4 == a.ttl);\n    })\n  })\n\n  describe('#get', function(){\n    it('should return the value', function(){\n      assert('a' == cache().set('a', 'a').get('a'));\n    })\n\n    it('should promote', function(){\n      var c = cache();\n      c.set('a', 'a');\n      c.set('b', 'b');\n      c.set('c', 'c');\n      c.set('d', 'd');\n      assert('d' == c.keys[c.keys.length - 1]);\n      c.get('a');\n      assert('a' == c.keys[c.keys.length - 1]);\n      c.get('c');\n      assert('c' == c.keys[c.keys.length - 1]);\n      c.get('b');\n      assert('b' == c.keys[c.keys.length - 1]);\n      assert('d' == c.keys[0]);\n    })\n  })\n\n  describe('#has', function(){\n    it('should work', function(){\n      var c = cache();\n      c.set('a', 'a');\n      assert(c.has('a'));\n      assert(!c.has('b'));\n    })\n  })\n\n  describe('#remove', function(){\n    it('should work', function(){\n      var c = cache();\n      c.set('a', 'a');\n      assert(c.has('a'));\n      c.remove('a');\n      assert(!c.has('a'));\n    })\n  })\n\n  describe('#max', function(){\n    it('should set ._max', function(){\n      assert(2 == cache().max(2)._max);\n    })\n\n    it('should cap', function(){\n      var c = cache();\n      c.set('a', 'a');\n      c.set('b', 'b');\n      c.set('c', 'c');\n      c.max(1);\n      assert(1 == c.keys.length);\n      assert('c' == c.keys[0]);\n      assert('c' == c.vals.c.value);\n    })\n  })\n\n  describe('#toJSON', function(){\n    it('should return object of key => val', function(){\n      var c = cache();\n      c.set('a', 'a');\n      c.set('b', 'b');\n      assert('a' == c.toJSON().a);\n      assert('b' == c.toJSON().b);\n    })\n  })\n\n  describe('#promote', function(){\n    it('should remove and push a key', function(){\n      var c = cache();\n      c.set('a', 'a');\n      c.set('b', 'b');\n      c.set('c', 'c');\n      assert(3 == c.keys.length)\n      assert('c' == c.keys[c.keys.length - 1]);\n      c.promote('a');\n      assert(3 == c.keys.length);\n      assert('a' == c.keys[c.keys.length - 1]);\n    })\n  })\n})\n",
    "deps": {
      "component/assert": "components/component-assert@0.5.0/index.js",
      "../index": "index.js"
    },
    "entry": true
  },
  "components/component-assert@0.5.0/index.js": {
    "id": "components/component-assert@0.5.0/index.js",
    "type": "js",
    "mtime": 1412680665000,
    "src": "\n/**\n * Module dependencies.\n */\n\nvar equals = require('equals');\nvar fmt = require('fmt');\nvar stack = require('stack');\n\n/**\n * Assert `expr` with optional failure `msg`.\n *\n * @param {Mixed} expr\n * @param {String} [msg]\n * @api public\n */\n\nmodule.exports = exports = function (expr, msg) {\n  if (expr) return;\n  throw error(msg || message());\n};\n\n/**\n * Assert `actual` is weak equal to `expected`.\n *\n * @param {Mixed} actual\n * @param {Mixed} expected\n * @param {String} [msg]\n * @api public\n */\n\nexports.equal = function (actual, expected, msg) {\n  if (actual == expected) return;\n  throw error(msg || fmt('Expected %o to equal %o.', actual, expected), actual, expected);\n};\n\n/**\n * Assert `actual` is not weak equal to `expected`.\n *\n * @param {Mixed} actual\n * @param {Mixed} expected\n * @param {String} [msg]\n * @api public\n */\n\nexports.notEqual = function (actual, expected, msg) {\n  if (actual != expected) return;\n  throw error(msg || fmt('Expected %o not to equal %o.', actual, expected));\n};\n\n/**\n * Assert `actual` is deep equal to `expected`.\n *\n * @param {Mixed} actual\n * @param {Mixed} expected\n * @param {String} [msg]\n * @api public\n */\n\nexports.deepEqual = function (actual, expected, msg) {\n  if (equals(actual, expected)) return;\n  throw error(msg || fmt('Expected %o to deeply equal %o.', actual, expected), actual, expected);\n};\n\n/**\n * Assert `actual` is not deep equal to `expected`.\n *\n * @param {Mixed} actual\n * @param {Mixed} expected\n * @param {String} [msg]\n * @api public\n */\n\nexports.notDeepEqual = function (actual, expected, msg) {\n  if (!equals(actual, expected)) return;\n  throw error(msg || fmt('Expected %o not to deeply equal %o.', actual, expected));\n};\n\n/**\n * Assert `actual` is strict equal to `expected`.\n *\n * @param {Mixed} actual\n * @param {Mixed} expected\n * @param {String} [msg]\n * @api public\n */\n\nexports.strictEqual = function (actual, expected, msg) {\n  if (actual === expected) return;\n  throw error(msg || fmt('Expected %o to strictly equal %o.', actual, expected), actual, expected);\n};\n\n/**\n * Assert `actual` is not strict equal to `expected`.\n *\n * @param {Mixed} actual\n * @param {Mixed} expected\n * @param {String} [msg]\n * @api public\n */\n\nexports.notStrictEqual = function (actual, expected, msg) {\n  if (actual !== expected) return;\n  throw error(msg || fmt('Expected %o not to strictly equal %o.', actual, expected));\n};\n\n/**\n * Assert `block` throws an `error`.\n *\n * @param {Function} block\n * @param {Function} [error]\n * @param {String} [msg]\n * @api public\n */\n\nexports.throws = function (block, err, msg) {\n  var threw;\n  try {\n    block();\n  } catch (e) {\n    threw = e;\n  }\n\n  if (!threw) throw error(msg || fmt('Expected %s to throw an error.', block.toString()));\n  if (err && !(threw instanceof err)) {\n    throw error(msg || fmt('Expected %s to throw an %o.', block.toString(), err));\n  }\n};\n\n/**\n * Assert `block` doesn't throw an `error`.\n *\n * @param {Function} block\n * @param {Function} [error]\n * @param {String} [msg]\n * @api public\n */\n\nexports.doesNotThrow = function (block, err, msg) {\n  var threw;\n  try {\n    block();\n  } catch (e) {\n    threw = e;\n  }\n\n  if (threw) throw error(msg || fmt('Expected %s not to throw an error.', block.toString()));\n  if (err && (threw instanceof err)) {\n    throw error(msg || fmt('Expected %s not to throw an %o.', block.toString(), err));\n  }\n};\n\n/**\n * Create a message from the call stack.\n *\n * @return {String}\n * @api private\n */\n\nfunction message() {\n  if (!Error.captureStackTrace) return 'assertion failed';\n  var callsite = stack()[2];\n  var fn = callsite.getFunctionName();\n  var file = callsite.getFileName();\n  var line = callsite.getLineNumber() - 1;\n  var col = callsite.getColumnNumber() - 1;\n  var src = get(file);\n  line = src.split('\\n')[line].slice(col);\n  var m = line.match(/assert\\((.*)\\)/);\n  return m && m[1].trim();\n}\n\n/**\n * Load contents of `script`.\n *\n * @param {String} script\n * @return {String}\n * @api private\n */\n\nfunction get(script) {\n  var xhr = new XMLHttpRequest;\n  xhr.open('GET', script, false);\n  xhr.send(null);\n  return xhr.responseText;\n}\n\n/**\n * Error with `msg`, `actual` and `expected`.\n *\n * @param {String} msg\n * @param {Mixed} actual\n * @param {Mixed} expected\n * @return {Error}\n */\n\nfunction error(msg, actual, expected){\n  var err = new Error(msg);\n  err.showDiff = 3 == arguments.length;\n  err.actual = actual;\n  err.expected = expected;\n  return err;\n}\n",
    "deps": {
      "equals": "components/jkroso-equals@0.3.7/index.js",
      "fmt": "components/yields-fmt@0.0.2/index.js",
      "stack": "components/component-stack@0.0.1/index.js"
    }
  },
  "components/yields-fmt@0.0.2/index.js": {
    "id": "components/yields-fmt@0.0.2/index.js",
    "type": "js",
    "mtime": 1386714383000,
    "src": "\n/**\n * Export `fmt`\n */\n\nmodule.exports = fmt;\n\n/**\n * Formatters\n */\n\nfmt.o = JSON.stringify;\nfmt.s = String;\nfmt.d = parseInt;\n\n/**\n * Format the given `str`.\n *\n * @param {String} str\n * @param {...} args\n * @return {String}\n * @api public\n */\n\nfunction fmt(str){\n  var args = [].slice.call(arguments, 1);\n  var j = 0;\n\n  return str.replace(/%([a-z])/gi, function(_, f){\n    return fmt[f]\n      ? fmt[f](args[j++])\n      : _ + f;\n  });\n}\n",
    "deps": {}
  },
  "components/component-stack@0.0.1/index.js": {
    "id": "components/component-stack@0.0.1/index.js",
    "type": "js",
    "mtime": 1349846180000,
    "src": "\n/**\n * Expose `stack()`.\n */\n\nmodule.exports = stack;\n\n/**\n * Return the stack.\n *\n * @return {Array}\n * @api public\n */\n\nfunction stack() {\n  var orig = Error.prepareStackTrace;\n  Error.prepareStackTrace = function(_, stack){ return stack; };\n  var err = new Error;\n  Error.captureStackTrace(err, arguments.callee);\n  var stack = err.stack;\n  Error.prepareStackTrace = orig;\n  return stack;\n}",
    "deps": {}
  },
  "components/jkroso-equals@0.3.7/index.js": {
    "id": "components/jkroso-equals@0.3.7/index.js",
    "type": "js",
    "mtime": 1411178909000,
    "src": "\nvar type = require('type')\n\n// (any, any, [array]) -> boolean\nfunction equals(a, b, memos){\n  // All identical values are equivalent\n  if (a === b) return true\n  var fnA = types[type(a)]\n  var fnB = types[type(b)]\n  return fnA && fnA === fnB\n    ? fnA(a, b, memos)\n    : false\n}\n\nvar types = {}\n\n// (Number) -> boolean\ntypes.number = function(a){\n  // NaN check\n  return a !== a\n}\n\n// (function, function, array) -> boolean\ntypes['function'] = function(a, b, memos){\n  return a.toString() === b.toString()\n    // Functions can act as objects\n    && types.object(a, b, memos)\n    && equals(a.prototype, b.prototype)\n}\n\n// (date, date) -> boolean\ntypes.date = function(a, b){\n  return +a === +b\n}\n\n// (regexp, regexp) -> boolean\ntypes.regexp = function(a, b){\n  return a.toString() === b.toString()\n}\n\n// (DOMElement, DOMElement) -> boolean\ntypes.element = function(a, b){\n  return a.outerHTML === b.outerHTML\n}\n\n// (textnode, textnode) -> boolean\ntypes.textnode = function(a, b){\n  return a.textContent === b.textContent\n}\n\n// decorate `fn` to prevent it re-checking objects\n// (function) -> function\nfunction memoGaurd(fn){\n  return function(a, b, memos){\n    if (!memos) return fn(a, b, [])\n    var i = memos.length, memo\n    while (memo = memos[--i]) {\n      if (memo[0] === a && memo[1] === b) return true\n    }\n    return fn(a, b, memos)\n  }\n}\n\ntypes['arguments'] =\ntypes.array = memoGaurd(compareArrays)\n\n// (array, array, array) -> boolean\nfunction compareArrays(a, b, memos){\n  var i = a.length\n  if (i !== b.length) return false\n  memos.push([a, b])\n  while (i--) {\n    if (!equals(a[i], b[i], memos)) return false\n  }\n  return true\n}\n\ntypes.object = memoGaurd(compareObjects)\n\n// (object, object, array) -> boolean\nfunction compareObjects(a, b, memos) {\n  var ka = getEnumerableProperties(a)\n  var kb = getEnumerableProperties(b)\n  var i = ka.length\n\n  // same number of properties\n  if (i !== kb.length) return false\n\n  // although not necessarily the same order\n  ka.sort()\n  kb.sort()\n\n  // cheap key test\n  while (i--) if (ka[i] !== kb[i]) return false\n\n  // remember\n  memos.push([a, b])\n\n  // iterate again this time doing a thorough check\n  i = ka.length\n  while (i--) {\n    var key = ka[i]\n    if (!equals(a[key], b[key], memos)) return false\n  }\n\n  return true\n}\n\n// (object) -> array\nfunction getEnumerableProperties (object) {\n  var result = []\n  for (var k in object) if (k !== 'constructor') {\n    result.push(k)\n  }\n  return result\n}\n\n/**\n * assert all values are equal\n *\n * @param {Any} [...]\n * @return {Boolean}\n */\n\nfunction allEqual(){\n  var i = arguments.length - 1\n  while (i > 0) {\n    if (!equals(arguments[i], arguments[--i])) return false\n  }\n  return true\n}\n\n/**\n * expose equals\n */\n\nmodule.exports = allEqual\nallEqual.compare = equals\n",
    "deps": {
      "type": "components/jkroso-type@1.1.0/index.js"
    }
  },
  "components/jkroso-type@1.1.0/index.js": {
    "id": "components/jkroso-type@1.1.0/index.js",
    "type": "js",
    "mtime": 1392871670000,
    "src": "\nvar toString = {}.toString\nvar DomNode = typeof window != 'undefined'\n  ? window.Node\n  : Function\n\n/**\n * Return the type of `val`.\n *\n * @param {Mixed} val\n * @return {String}\n * @api public\n */\n\nmodule.exports = exports = function(x){\n  var type = typeof x\n  if (type != 'object') return type\n  type = types[toString.call(x)]\n  if (type) return type\n  if (x instanceof DomNode) switch (x.nodeType) {\n    case 1:  return 'element'\n    case 3:  return 'text-node'\n    case 9:  return 'document'\n    case 11: return 'document-fragment'\n    default: return 'dom-node'\n  }\n}\n\nvar types = exports.types = {\n  '[object Function]': 'function',\n  '[object Date]': 'date',\n  '[object RegExp]': 'regexp',\n  '[object Arguments]': 'arguments',\n  '[object Array]': 'array',\n  '[object String]': 'string',\n  '[object Null]': 'null',\n  '[object Undefined]': 'undefined',\n  '[object Number]': 'number',\n  '[object Boolean]': 'boolean',\n  '[object Object]': 'object',\n  '[object Text]': 'text-node',\n  '[object Uint8Array]': 'bit-array',\n  '[object Uint16Array]': 'bit-array',\n  '[object Uint32Array]': 'bit-array',\n  '[object Uint8ClampedArray]': 'bit-array',\n  '[object Error]': 'error',\n  '[object FormData]': 'form-data',\n  '[object File]': 'file',\n  '[object Blob]': 'blob'\n}\n",
    "deps": {}
  },
  "index.js": {
    "id": "index.js",
    "type": "js",
    "mtime": 1412876726000,
    "src": "\n/**\n * dependencies\n */\n\nvar ms = require('guille/ms.js');\n\n/**\n * Export `Cache`\n */\n\nmodule.exports = Cache;\n\n/**\n * Has.\n */\n\nvar has = ({}).hasOwnProperty;\n\n/**\n * Initialize `Cache`.\n *\n * @param {Object} opts\n * @api public\n */\n\nfunction Cache(opts){\n  if (!(this instanceof Cache)) return new Cache(opts);\n  opts = opts || {};\n  opts.max = opts.max || Infinity;\n  opts.ttl = opts.ttl || 0;\n  this.keys = [];\n  this.vals = {};\n  this.max(opts.max);\n  this.ttl(opts.ttl);\n}\n\n/**\n * Set `ttl`.\n *\n * @param {Number|String} ttl\n * @return {Cache}\n * @api public\n */\n\nCache.prototype.ttl = function(ttl){\n  this._ttl = 'string' == typeof ttl\n    ? ms(ttl)\n    : ttl;\n\n  return this;\n};\n\n/**\n * Set `key`, `val` and optional `ttl`\n *\n * @param {String|Object} key\n * @param {Mixed} val\n * @param {String|Number} ttl\n * @return {Cache}\n * @api public\n */\n\nCache.prototype.set = function(key, val, ttl){\n  if ('object' == typeof key) {\n    for (var k in key) this.set(k, key[k], ttl);\n    return this;\n  }\n\n  // remove\n  if (this.has(key)) {\n    this.remove(key);\n  }\n\n  // ttl\n  if ('string' == typeof ttl) ttl = ms(ttl);\n\n  // add\n  this.keys.push(key);\n  this.vals[key] = {\n    ttl: ttl || this._ttl,\n    created: +new Date,\n    value: val\n  };\n\n  // cap\n  this.cap();\n  return this;\n};\n\n/**\n * Get `key`.\n *\n * @param {String} key\n * @return {Mixed}\n * @api public\n */\n\nCache.prototype.get = function(key){\n  if (!this.has(key)) return;\n  var val = this.vals[key];\n\n  // ttl\n  if (val.ttl && new Date > val.ttl + val.created) {\n    this.remove(key);\n    return;\n  }\n\n  // promote\n  this.promote(key);\n\n  // value\n  return val.value;\n};\n\n/**\n * Has `key`\n *\n * @param {String} key\n * @return {Boolean}\n * @api public\n */\n\nCache.prototype.has = function(key){\n  return has.call(this.vals, key);\n};\n\n/**\n * Remove `key`\n *\n * @param {String} key\n * @return {Cache}\n * @api public\n */\n\nCache.prototype.remove = function(key){\n  if (!this.has(key)) return this;\n  var i = this.keys.indexOf(key);\n  this.keys.splice(i, 1);\n  delete this.vals[key];\n  return this;\n};\n\n/**\n * Set `max`.\n *\n * @param {Number} max\n * @return {Cache}\n * @api public\n */\n\nCache.prototype.max = function(max){\n  this._max = max;\n  this.cap();\n  return this;\n};\n\n/**\n * To json\n *\n * @return {Object}\n * @api public\n */\n\nCache.prototype.toJSON = function(){\n  var ret = {};\n\n  for (var k in this.vals) {\n    if (!has.call(this.vals, k)) continue;\n    ret[k] = this.vals[k].value;\n  }\n\n  return ret;\n};\n\n/**\n * Promote `key`\n *\n * @param {String} key\n * @return {Cache}\n * @api public\n */\n\nCache.prototype.promote = function(key){\n  if (!this.has(key)) return this;\n  var i = this.keys.indexOf(key);\n  this.keys.splice(i, 1);\n  this.keys.push(key);\n  return this;\n};\n\n/**\n * Cap\n *\n * @return {Cache}\n * @api private\n */\n\nCache.prototype.cap = function(){\n  var length = this.keys.length\n    , n = length - this._max;\n\n  while (0 < n--) {\n    var k = this.keys.shift();\n    delete this.vals[k];\n  }\n\n  return this;\n};\n",
    "deps": {
      "guille/ms.js": "components/guille-ms.js@0.6.2/index.js"
    }
  },
  "components/guille-ms.js@0.6.2/index.js": {
    "id": "components/guille-ms.js@0.6.2/index.js",
    "type": "js",
    "mtime": 1386259049000,
    "src": "/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} options\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options){\n  options = options || {};\n  if ('string' == typeof val) return parse(val);\n  return options.long\n    ? long(val)\n    : short(val);\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  var match = /^((?:\\d+)?\\.?\\d+) *(ms|seconds?|s|minutes?|m|hours?|h|days?|d|years?|y)?$/i.exec(str);\n  if (!match) return;\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'y':\n      return n * y;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 's':\n      return n * s;\n    case 'ms':\n      return n;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction short(ms) {\n  if (ms >= d) return Math.round(ms / d) + 'd';\n  if (ms >= h) return Math.round(ms / h) + 'h';\n  if (ms >= m) return Math.round(ms / m) + 'm';\n  if (ms >= s) return Math.round(ms / s) + 's';\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction long(ms) {\n  return plural(ms, d, 'day')\n    || plural(ms, h, 'hour')\n    || plural(ms, m, 'minute')\n    || plural(ms, s, 'second')\n    || ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, n, name) {\n  if (ms < n) return;\n  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n",
    "deps": {}
  }
}